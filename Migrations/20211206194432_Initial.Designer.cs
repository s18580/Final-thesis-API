// <auto-generated />
using System;
using Final_thesis_api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Final_thesis_api.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20211206194432_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Final_thesis_api.Models.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdOwner")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PostCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdAddress");

                    b.HasIndex("IdOwner");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Assignment", b =>
                {
                    b.Property<int>("IdWorker")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<double?>("HoursWorked")
                        .HasColumnType("float");

                    b.Property<bool>("OrderLeader")
                        .HasColumnType("bit");

                    b.HasKey("IdWorker", "IdOrder");

                    b.HasIndex("IdOrder");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Color", b =>
                {
                    b.Property<int>("IdColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdLink")
                        .HasColumnType("int");

                    b.Property<bool>("IsForCover")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdColor");

                    b.HasIndex("IdLink");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Customer", b =>
                {
                    b.Property<int>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyEmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("IdWorker")
                        .HasColumnType("int");

                    b.Property<int?>("NIP")
                        .HasColumnType("int");

                    b.Property<int?>("Regon")
                        .HasColumnType("int");

                    b.HasKey("IdCustomer");

                    b.HasIndex("IdWorker");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DeliveriesAddresses", b =>
                {
                    b.Property<int>("IdAddress")
                        .HasColumnType("int");

                    b.Property<int>("IdLink")
                        .HasColumnType("int");

                    b.HasKey("IdAddress", "IdLink");

                    b.HasIndex("IdLink");

                    b.ToTable("DeliveriesAddresses");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.BindingType", b =>
                {
                    b.Property<int>("IdBindingType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdBindingType");

                    b.ToTable("BindingTypes");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.DeliveryType", b =>
                {
                    b.Property<int>("IdDeliveryType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdDeliveryType");

                    b.ToTable("DeliveryTypes");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.FileStatus", b =>
                {
                    b.Property<int>("IdFileStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdFileStatus");

                    b.ToTable("FileStatuses");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.FileType", b =>
                {
                    b.Property<int>("IdFileType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdFileType");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.MinimumRate", b =>
                {
                    b.Property<int>("IdMinimumRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Circulation")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IdMinimumRate");

                    b.ToTable("MinimumRates");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.OrderItemType", b =>
                {
                    b.Property<int>("IdOrderItemType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdOrderItemType");

                    b.ToTable("OrderItemTypes");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.OrderStatus", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdStatus");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.PriceList", b =>
                {
                    b.Property<int>("IdPriceList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IdPriceList");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.ServiceName", b =>
                {
                    b.Property<int>("IdServiceName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("DefaultPrice")
                        .HasColumnType("float");

                    b.Property<int?>("IdMinimumRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdServiceName");

                    b.HasIndex("IdMinimumRate");

                    b.ToTable("ServiceNames");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.SupplyItemType", b =>
                {
                    b.Property<int>("IdSupplyItemType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdSupplyItemType");

                    b.ToTable("SupplyItemTypes");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.Worksite", b =>
                {
                    b.Property<int>("IdWorksite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdWorksite");

                    b.ToTable("Worksites");
                });

            modelBuilder.Entity("Final_thesis_api.Models.File", b =>
                {
                    b.Property<int>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdFileStatus")
                        .HasColumnType("int");

                    b.Property<int>("IdFileType")
                        .HasColumnType("int");

                    b.Property<int>("IdLink")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdFile");

                    b.HasIndex("IdFileStatus");

                    b.HasIndex("IdFileType");

                    b.HasIndex("IdLink");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRepresentative")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsAuction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("OfferValidityDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderSubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdOrder");

                    b.HasIndex("IdRepresentative");

                    b.HasIndex("IdStatus");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Final_thesis_api.Models.OrderItem", b =>
                {
                    b.Property<int>("IdOrderItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Circulation")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverFormat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdBindingType")
                        .HasColumnType("int");

                    b.Property<int>("IdDeliveryType")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdOrderItemType")
                        .HasColumnType("int");

                    b.Property<int?>("IdSelectedValuation")
                        .HasColumnType("int");

                    b.Property<string>("InsideFormat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdOrderItem");

                    b.HasIndex("IdBindingType");

                    b.HasIndex("IdDeliveryType");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdOrderItemType");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Paper", b =>
                {
                    b.Property<int>("IdPaper")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FiberDirection")
                        .HasColumnType("int");

                    b.Property<int>("IdLink")
                        .HasColumnType("int");

                    b.Property<bool>("IsForCover")
                        .HasColumnType("bit");

                    b.Property<string>("Kind")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Opacity")
                        .HasColumnType("int");

                    b.Property<double>("PricePerKilogram")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SheetFormat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPaper");

                    b.HasIndex("IdLink");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Representative", b =>
                {
                    b.Property<int>("IdRepresentative")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdOwner")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PhonerNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("IdRepresentative");

                    b.HasIndex("IdOwner");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Service", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdLink")
                        .HasColumnType("int");

                    b.Property<int?>("IdServiceName")
                        .HasColumnType("int");

                    b.Property<bool>("IsForCover")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IdService");

                    b.HasIndex("IdLink");

                    b.HasIndex("IdServiceName");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Supply", b =>
                {
                    b.Property<int>("IdSupply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdOrderItem")
                        .HasColumnType("int");

                    b.Property<int?>("IdRepresentative")
                        .HasColumnType("int");

                    b.Property<int>("IdSupplyItemType")
                        .HasColumnType("int");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("SupplyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdSupply");

                    b.HasIndex("IdOrderItem");

                    b.HasIndex("IdRepresentative");

                    b.HasIndex("IdSupplyItemType");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Valuation", b =>
                {
                    b.Property<int>("IdValuation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Circulation")
                        .HasColumnType("int");

                    b.Property<string>("CoverFormat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoverSheetFormat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("GraphicDesignPrice")
                        .HasColumnType("float");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("int");

                    b.Property<int?>("IdBindingType")
                        .HasColumnType("int");

                    b.Property<int>("IdOrderItem")
                        .HasColumnType("int");

                    b.Property<string>("InsideFormat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InsideSheetFormat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("OfferValidityDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderItemIdOrderItem")
                        .HasColumnType("int");

                    b.Property<double>("PrintPrice")
                        .HasColumnType("float");

                    b.Property<bool>("PrintingOnReverse")
                        .HasColumnType("bit");

                    b.Property<int>("PrintingPlateNuber")
                        .HasColumnType("int");

                    b.Property<double>("SamplePrintoutsPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPriceNet")
                        .HasColumnType("float");

                    b.HasKey("IdValuation");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdBindingType");

                    b.HasIndex("OrderItemIdOrderItem");

                    b.ToTable("Valuations");
                });

            modelBuilder.Entity("Final_thesis_api.Models.ValuationPriceList", b =>
                {
                    b.Property<int>("IdValuation")
                        .HasColumnType("int");

                    b.Property<int>("IdPriceList")
                        .HasColumnType("int");

                    b.HasKey("IdValuation", "IdPriceList");

                    b.HasIndex("IdPriceList");

                    b.ToTable("ValuationPriceLists");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Worker", b =>
                {
                    b.Property<int>("IdWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdWorksite")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhonerNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdWorker");

                    b.HasIndex("IdWorksite");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Address", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Supplier", "Supplier")
                        .WithMany("Addresses")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Assignment", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Order", "Order")
                        .WithMany("Assignments")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Worker", "Worker")
                        .WithMany("Assignments")
                        .HasForeignKey("IdWorker")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Color", b =>
                {
                    b.HasOne("Final_thesis_api.Models.OrderItem", "OrderItem")
                        .WithMany("Colors")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Valuation", "Valuation")
                        .WithMany("Colors")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Customer", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Worker", "Worker")
                        .WithMany("Customers")
                        .HasForeignKey("IdWorker")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DeliveriesAddresses", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Address", "Address")
                        .WithMany("DeliveriesAddresses")
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Order", "Order")
                        .WithMany("DeliveriesAddresses")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Supply", "Supply")
                        .WithMany("DeliveriesAddresses")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Order");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.ServiceName", b =>
                {
                    b.HasOne("Final_thesis_api.Models.DictionaryModels.MinimumRate", "MinimumRate")
                        .WithMany("ServicesNames")
                        .HasForeignKey("IdMinimumRate")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MinimumRate");
                });

            modelBuilder.Entity("Final_thesis_api.Models.File", b =>
                {
                    b.HasOne("Final_thesis_api.Models.DictionaryModels.FileStatus", "FileStatus")
                        .WithMany("Files")
                        .HasForeignKey("IdFileStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.FileType", "FileType")
                        .WithMany("Files")
                        .HasForeignKey("IdFileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Order", "Order")
                        .WithMany("Files")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.OrderItem", "OrderItem")
                        .WithMany("Files")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Valuation", "Valuation")
                        .WithMany("Files")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileStatus");

                    b.Navigation("FileType");

                    b.Navigation("Order");

                    b.Navigation("OrderItem");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Order", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Representative", "Representative")
                        .WithMany("Orders")
                        .HasForeignKey("IdRepresentative")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Representative");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Final_thesis_api.Models.OrderItem", b =>
                {
                    b.HasOne("Final_thesis_api.Models.DictionaryModels.BindingType", "BindingType")
                        .WithMany("OrderItems")
                        .HasForeignKey("IdBindingType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.DeliveryType", "DeliveryType")
                        .WithMany("OrderItems")
                        .HasForeignKey("IdDeliveryType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.OrderItemType", "OrderItemType")
                        .WithMany("OrderItems")
                        .HasForeignKey("IdOrderItemType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BindingType");

                    b.Navigation("DeliveryType");

                    b.Navigation("Order");

                    b.Navigation("OrderItemType");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Paper", b =>
                {
                    b.HasOne("Final_thesis_api.Models.OrderItem", "OrderItem")
                        .WithMany("Papers")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Valuation", "Valuation")
                        .WithMany("Papers")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Representative", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Customer", "Customer")
                        .WithMany("Representatives")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Supplier", "Supplier")
                        .WithMany("Representatives")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Service", b =>
                {
                    b.HasOne("Final_thesis_api.Models.OrderItem", "OrderItem")
                        .WithMany("Services")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Valuation", "Valuation")
                        .WithMany("Services")
                        .HasForeignKey("IdLink")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.ServiceName", "ServiceName")
                        .WithMany("Services")
                        .HasForeignKey("IdServiceName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderItem");

                    b.Navigation("ServiceName");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Supply", b =>
                {
                    b.HasOne("Final_thesis_api.Models.OrderItem", "OrderItem")
                        .WithMany("Supplies")
                        .HasForeignKey("IdOrderItem")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Representative", "Representative")
                        .WithMany("Supplies")
                        .HasForeignKey("IdRepresentative")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.SupplyItemType", "SupplyItemType")
                        .WithMany("Supplies")
                        .HasForeignKey("IdSupplyItemType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Representative");

                    b.Navigation("SupplyItemType");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Valuation", b =>
                {
                    b.HasOne("Final_thesis_api.Models.Worker", "Author")
                        .WithMany("Valuations")
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.DictionaryModels.BindingType", "BindingType")
                        .WithMany("Valuations")
                        .HasForeignKey("IdBindingType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Final_thesis_api.Models.OrderItem", null)
                        .WithMany("Valuations")
                        .HasForeignKey("OrderItemIdOrderItem")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("BindingType");
                });

            modelBuilder.Entity("Final_thesis_api.Models.ValuationPriceList", b =>
                {
                    b.HasOne("Final_thesis_api.Models.DictionaryModels.PriceList", "PriceList")
                        .WithMany("ValuationPriceLists")
                        .HasForeignKey("IdPriceList")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Final_thesis_api.Models.Valuation", "Valuation")
                        .WithMany("PriceListPrices")
                        .HasForeignKey("IdPriceList")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Worker", b =>
                {
                    b.HasOne("Final_thesis_api.Models.DictionaryModels.Worksite", "Worksite")
                        .WithMany("Workers")
                        .HasForeignKey("IdWorksite")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Worksite");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Address", b =>
                {
                    b.Navigation("DeliveriesAddresses");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.BindingType", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Valuations");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.DeliveryType", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.FileStatus", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.FileType", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.MinimumRate", b =>
                {
                    b.Navigation("ServicesNames");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.OrderItemType", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.PriceList", b =>
                {
                    b.Navigation("ValuationPriceLists");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.ServiceName", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.SupplyItemType", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Final_thesis_api.Models.DictionaryModels.Worksite", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Order", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("DeliveriesAddresses");

                    b.Navigation("Files");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Final_thesis_api.Models.OrderItem", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Files");

                    b.Navigation("Papers");

                    b.Navigation("Services");

                    b.Navigation("Supplies");

                    b.Navigation("Valuations");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Representative", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Supplier", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Supply", b =>
                {
                    b.Navigation("DeliveriesAddresses");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Valuation", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Files");

                    b.Navigation("Papers");

                    b.Navigation("PriceListPrices");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Final_thesis_api.Models.Worker", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Customers");

                    b.Navigation("Valuations");
                });
#pragma warning restore 612, 618
        }
    }
}
